#!/usr/bin/env python3

# Copyright (c) 2023 NVIDIA Corporation.  All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
# 1. Redistributions of source code must retain the above copyright notice, this
#    list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright notice,
#    this list of conditions and the following disclaimer in the documentation
#    and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# The views and conclusions contained in the software and documentation are those
# of the authors and should not be interpreted as representing official policies,
# either expressed or implied, of the FreeBSD Project.

"""
Print BlueField DDR memory training results.
"""

import array
import re

hidtag=bytearray('MLNXBF3B', encoding='ascii')
uidtag=bytearray('_UID', encoding='ascii')
properties=[('read-timing-margin', 'Read Data worst timing margin'),
            ('write-timing-margin', 'Write Data worst timing margin'),
            ('read-vref-margin', 'Read Data worst Vref margin'),
            ('write-vref-margin', 'Write Data worst Vref margin'),
            ('cs-vref-margin', 'TX CS worst Vref margin'),
            ('ca-vref-margin', 'TX CA worst Vref margin'),
            ('cs-timing-margin', 'TX CS worst timing margin'),
            ('ca-timing-margin', 'TX CA worst timing margin')]
            
def get_byte_value(table, property):
    pos = table.find(property, 0)
    pos += len(property)
    return table[pos+2]

def get_bool_value(table, property):
    pos = table.find(property, 0)
    pos += len(property)
    if table[pos] == 0xa:
        pos += 1
    return table[pos]

with open(r"/sys/firmware/acpi/tables/SSDT1", "rb") as ssdt1:
    contents = ssdt1.read()
    strings = contents.decode('ascii', errors='ignore')

    ddr_pos = contents.find(hidtag, 0)
    while ddr_pos != -1:
        contents = contents[ddr_pos:]
        uid = get_bool_value(contents, uidtag)
        print("Memory controller %d Channel %d " % (uid >> 1, uid & 1))
        if get_byte_value(contents, bytearray('populated', encoding='ascii')) == 1:
            for p in properties:
                val = get_byte_value(contents, bytearray(p[0], encoding='ascii'))
                if val > 0:
                    print(p[1], val)
        else:
            print("Unpopulated")
        
        ddr_pos = contents.find(hidtag, 1)
        print()
